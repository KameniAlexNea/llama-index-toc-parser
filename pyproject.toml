[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[dependency-groups]
dev = [
    "tox",
    "black",
    "flake8",
    "isort",
    "autoflake",
    "mypy",
    "safety",
    "sphinx",
    "wheel",
    "twine",
    "build",
    "pickleshare",
    "coverage",
    "pytest>=7.0",
    "pytest-cov>=3.0",
    "pytest-mock>=3.10",
]

[lint.flake8-annotations]
mypy-init-return = true

[lint.pydocstyle]
convention = "google"

[project]
authors = [{email = "kamenialexnea@gmail.com", name = "Alex Kameni"}]
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Markup",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "llama-index-core>=0.12.36,<0.13",
    "pymupdf>=1.25.5",
]
description = "A Python package for Document Node Chunking based on Table of Contents"
keywords = [
    "LLM",
    "NLP",
    "RAG",
    "document",
    "chunking",
    "TOC",
    "parser",
    "llama-index",
]
license = "MIT"
name = "node-chunker"
readme = "README.md"
requires-python = ">=3.9,<4.0"
version = "0.0.1"

[project.urls]
Homepage = "https://github.com/KameniAlexNea/llama-index-toc-parser"
Repository = "https://github.com/KameniAlexNea/llama-index-toc-parser"

[tool.codespell]
check-filenames = true
check-hidden = true
ignore-words-list = "gallary,momento"
skip = "*.csv,*.html,*.json,*.jsonl,*.pdf,*.txt,*.ipynb"

[tool.hatch.build.targets.sdist]
include = ["node_chunker"]

[tool.hatch.build.targets.wheel]
include = ["node_chunker"]

[tool.hatch.build.targets.wheel.sources]
"node_chunker" = "node_chunker"

[tool.mypy]
disallow_untyped_defs = true
exclude = ["build", "examples", "tests", "venv"]
explicit_package_bases = true
ignore_missing_imports = true
mypy_path = "node_chunker"
namespace_packages = true
plugins = "pydantic.mypy"
python_version = "3.9"

[tool.ruff]
exclude = [
    "build",
    "examples",
    "tests",
]
target-version = "py39"
lint.ignore = [
    "COM812",
    "D212",
    "D417",
    "F541",
    "RUF100",
    "TC002",
    "UP",
    "PT001",
    "E501",
    "E402",
    "PYI063",
    "ANN204",
    "D401",
    "D404",
]
lint.select = [
    "ANN204",
    "B009",
    "B010",
    "B011",
    "B013",
    "B014",
    "C4",
    "COM812",
    "COM819",
    "D201",
    "D202",
    "D204",
    "D207",
    "D208",
    "D209",
    "D211",
    "D213",
    "D214",
    "D215",
    "D3",
    "D4",
    "E",
    "EXE004",
    "F401",
    "F504",
    "F541",
    "F632",
    "FLY",
    "G010",
    "I002",
    "PERF1",
    "PIE790",
    "PIE794",
    "PIE808",
    "PIE810",
    "PLC0414",
    "PLE2510",
    "PLE2512",
    "PLE2513",
    "PLE2514",
    "PLE2515",
    "PLR1711",
    "PT001",
    "PT003",
    "PT006",
    "PT02",
    "PTH201",
    "PYI",
    "Q",
    "RET501",
    "RET502",
    "RET503",
    "RET504",
    "RSE",
    "RUF005",
    "RUF010",
    "RUF015",
    "RUF1",
    "SIM101",
    "SIM103",
    "SIM109",
    "SIM118",
    "SIM2",
    "SIM300",
    "SIM9",
    "TC005",
    "TD006",
    "TID",
    "TRY201",
    "W",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0",
    "pytest-cov>=3.0",
    "pytest-mock>=3.10",
]
[tool.tomlsort]
all = false
in_place = true
spaces_before_inline_comment = 2  # Match Python PEP 8
spaces_indent_inline_array = 4  # Match Python PEP 8
trailing_comma_inline_array = true

[tool.uv]
default-groups = [
    "dev",
]

[[tool.uv.index]]
name = "nvidia-pypi"
url = "https://pypi.nvidia.com"
